"use client";

import {
    Dialog, DialogTitle, DialogPanel, Transition, TransitionChild,
} from "@headlessui/react";
import { PencilSquareIcon, TrashIcon } from "@heroicons/react/24/outline";
import { ColumnDef } from "@tanstack/react-table";
import { debounce } from "lodash";
import { Fragment, useCallback, useEffect, useMemo, useState } from "react";
import toast from "react-hot-toast";

import TanStackTable from "@/app/components/commons/TanStackTable";
import Drawer from "@/app/components/commons/Drawer";
import CategoryForm from "../components/CategoryForm";

import { listSubCategories, deleteCategory } from "@/app/api_/categories";
import { CategoryType } from "@/types/CategoryType";

type SubcategoryProps = {
    limit: number;
    type: string;
};


function CategoryActionCell({
    category,
    onEdit,
}: {
    category: CategoryType;
    onEdit: (cat: CategoryType) => void;
    onStatusUpdate: (newStatus: "active" | "inactive") => void;
}) {
    const [isModalOpen, setIsModalOpen] = useState(false);


    const handleDelete = async () => {
        try {
            await deleteCategory(category.id);
            toast.success("Category deleted.");
            setIsModalOpen(false);
            window.location.reload();
        } catch {
            toast.error("Delete failed.");
        }
    };

    return (
        <>
            <div className="flex items-center gap-2">
                <button
                    onClick={() => onEdit(category)}
                    className="bg-yellow-500 text-white p-1.5 rounded hover:bg-yellow-600"
                >
                    <PencilSquareIcon className="w-4 h-4" />
                </button>
                <button
                    onClick={() => setIsModalOpen(true)}
                    className="bg-red-500 text-white p-1.5 rounded hover:bg-red-600"
                >
                    <TrashIcon className="w-4 h-4" />
                </button>
            </div>

            {/* Delete Confirmation Modal */}
            <Transition appear show={isModalOpen} as={Fragment}>
                <Dialog as="div" className="relative z-50" onClose={() => setIsModalOpen(false)}>
                    <TransitionChild
                        as={Fragment}
                        enter="ease-out duration-300"
                        enterFrom="opacity-0"
                        enterTo="opacity-100"
                        leave="ease-in duration-200"
                        leaveFrom="opacity-100"
                        leaveTo="opacity-0"
                    >
                        <div className="fixed inset-0 bg-black/30 backdrop-blur-sm" />
                    </TransitionChild>

                    <div className="fixed inset-0 overflow-y-auto">
                        <div className="flex min-h-full items-center justify-center p-4">
                            <TransitionChild
                                as={Fragment}
                                enter="ease-out duration-300"
                                enterFrom="opacity-0 scale-95"
                                enterTo="opacity-100 scale-100"
                                leave="ease-in duration-200"
                                leaveFrom="opacity-100 scale-100"
                                leaveTo="opacity-0 scale-95"
                            >
                                <DialogPanel className="w-full max-w-md rounded-2xl bg-white p-6 shadow-xl">
                                    <DialogTitle className="text-lg font-medium text-gray-900">
                                        Confirm Deletion
                                    </DialogTitle>
                                    <p className="mt-2 text-sm text-gray-500">
                                        Are you sure you want to delete this subcategory? This action cannot be undone.
                                    </p>
                                    <div className="mt-4 flex justify-end gap-3">
                                        <button
                                            className="rounded-md border px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"
                                            onClick={() => setIsModalOpen(false)}
                                        >
                                            Cancel
                                        </button>
                                        <button
                                            className="rounded-md bg-red-600 px-4 py-2 text-sm text-white hover:bg-red-700"
                                            onClick={handleDelete}
                                        >
                                            Proceed
                                        </button>
                                    </div>
                                </DialogPanel>
                            </TransitionChild>
                        </div>
                    </div>
                </Dialog>
            </Transition>
        </>
    );
}

const Subcategory: React.FC<SubcategoryProps> = ({ limit, type }) => {
    const [categories, setCategories] = useState<CategoryType[]>([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);
    const [search, setSearch] = useState("");
    const [editingCategory, setEditingCategory] = useState<CategoryType | null>(null);
    const [pagination, setPagination] = useState({ pageIndex: 0, pageSize: limit });

    const updateCategoryStatusInState = (id: number, newStatus: "active" | "inactive") => {
        setCategories((prev) =>
            prev.map((cat) => (cat.id === id ? { ...cat, status: newStatus } : cat))
        );
    };

    const columns: ColumnDef<CategoryType>[] = useMemo(() => [
        {
            header: "Subcategory",
            accessorKey: "name",
            cell: ({ row }) => <span className="text-gray-800 font-medium">{row.original.name}</span>,
        },
        {
            header: "Parent Category",
            accessorKey: "parent_name",
            cell: ({ row }) => (
                <span className="text-sm text-gray-700">{row.original.parent_name ?? "N/A"}</span>
            ),
        },
        {
            header: "Action",
            accessorKey: "id",
            cell: ({ row }) => (
                <CategoryActionCell
                    category={row.original}
                    onEdit={setEditingCategory}
                    onStatusUpdate={(status) => updateCategoryStatusInState(row.original.id, status)}
                />
            ),
        },
    ], []);

    const fetchCategories = useCallback(
        async (pageSize: number = 10, pageIndex: number, searchTerm: string) => {
            try {
                setLoading(true);
                const offset = pageIndex * pageSize;
                console.log("Fetching categories with type:", pageSize);
                const response = await listSubCategories(pageSize, offset, searchTerm, type);

                const flattened: CategoryType[] = response.data.flatMap((parent: CategoryType) =>
                    (parent.children || []).map((child) => ({
                        id: child.id,
                        name: child.name,
                        slug: child.slug,
                        parent_id: parent.id,
                        parent_name: parent.name,
                        parent_slug: parent.slug,
                        status: parent.status,
                        description: child.description || "",
                        image: child.image || "",
                        type: child.type || type,
                        children: [],
                    }))
                );

                setCategories(flattened);
            } catch (err) {
                console.error(err);
                setError("An error occurred while fetching categories.");
            } finally {
                setLoading(false);
            }
        },
        [type]
    );


    const debouncedFetch = useMemo(
        () => debounce(fetchCategories, 300),
        [fetchCategories]
    );
    useEffect(() => {
        debouncedFetch(pagination.pageSize, pagination.pageIndex, search);
        return () => debouncedFetch.cancel();
    }, [pagination.pageSize, pagination.pageIndex, search, debouncedFetch]);

    return (
        <div className="space-y-6">
            <input
                type="text"
                placeholder="Search by subcategory name..."
                value={search}
                onChange={(e) => {
                    setSearch(e.target.value);
                    setPagination((prev) => ({ ...prev, pageIndex: 0 }));
                }}
                className="w-full px-3 py-2 border border-amber-600 rounded-md text-gray-900"
            />

            <TanStackTable
                data={categories}
                columns={columns}
                loading={loading}
                error={error}
                pagination={{
                    pageIndex: pagination.pageIndex,
                    pageSize: pagination.pageSize,
                    totalRows: categories.length,
                }}
                onPaginationChange={(newPagination) => setPagination(newPagination)}
            />

            <Drawer
                isOpen={!!editingCategory}
                onClose={() => setEditingCategory(null)}
                title="Edit Subcategory"
            >
                <CategoryForm
                    category={editingCategory}
                    onClose={() => setEditingCategory(null)}
                />
            </Drawer>
        </div>
    );
};

export default Subcategory;
